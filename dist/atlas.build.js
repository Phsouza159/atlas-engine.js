/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./atlas.web/public/js/atlas-engine/source/atlas.main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./atlas.web/public/js/atlas-engine/source/atlas.main.js":
/*!***************************************************************!*\
  !*** ./atlas.web/public/js/atlas-engine/source/atlas.main.js ***!
  \***************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _atlas_natives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./atlas.natives */ \"./atlas.web/public/js/atlas-engine/source/atlas.natives.js\");\n/* harmony import */ var _enum_atlas_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enum/atlas.enum */ \"./atlas.web/public/js/atlas-engine/source/enum/atlas.enum.js\");\n/* harmony import */ var _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/atlas.core */ \"./atlas.web/public/js/atlas-engine/source/modules/atlas.core.js\");\n/* harmony import */ var _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/atlas.sys */ \"./atlas.web/public/js/atlas-engine/source/modules/atlas.sys.js\");\n/* harmony import */ var _modules_atlas_mod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/atlas.mod */ \"./atlas.web/public/js/atlas-engine/source/modules/atlas.mod.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(function () {\r\n    /**\r\n     * Construtor\r\n     * @param {object} args \r\n     */\r\n    function AtlasCtor(args) {\r\n        try{\r\n            AtlasApp = new AtlasApp(args);\r\n\r\n            window.AtlasApp = AtlasApp\r\n\r\n            AtlasApp.start(AtlasApp);\r\n\r\n        }catch(e)\r\n        {\r\n            new AtlasApp().sys.pagErroCodView(500 , `<b>Erro interno no servidor</b><p>Mensagem: ${e} </p>`);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {object} args \r\n     */\r\n    var AtlasApp = function (args) {\r\n        if (args != null) {\r\n\r\n            if (typeof args != 'object')\r\n                this.log('args não é um objeto', _enum_atlas_enum__WEBPACK_IMPORTED_MODULE_1__[\"eLogs\"].fatal);\r\n\r\n            this.core.pagLoad(this);\r\n\r\n            this.logView('atlas init!');\r\n\r\n            this.core.vars(args, this);\r\n            \r\n        }\r\n        else {\r\n            console.warn('Atlas is start. configuracao não pode ser null')\r\n        }\r\n        return this;\r\n    };\r\n\r\n    AtlasApp.prototype.log = function (cod, text) {\r\n        let log = [\r\n        /* 000 - log */ (text) => { console.log(text); },\r\n        /* 001 - log */ (text) => { console.info(text); },\r\n        /* 002 - log */ (text) => { console.warn(text); },\r\n        /* 003 - log */ (text) => { console.error(text); },\r\n        ];\r\n\r\n        cod = cod == null ? 3 : cod;\r\n\r\n        try {\r\n            log[cod](text);\r\n        }\r\n        catch (e) {\r\n            console.warn(e);\r\n        }\r\n    }\r\n\r\n    AtlasApp.prototype.setCookie = function(name , value , duration = null) {\r\n        let cookie = `${name}=${escape(value)}`;\r\n\r\n        document.cookie = cookie;\r\n    }\r\n\r\n    AtlasApp.prototype.getCookie = function(name) {\r\n        let cokies = document.cokie;\r\n        let prefix = `${name}=`;\r\n        let begin = cokies.indexOf(`;${prefix}`);\r\n\r\n        if(begin == -1)\r\n        {\r\n            begin = cokies.indexOf(prefix);\r\n\r\n            if(begin != 0)\r\n            {\r\n                return null;\r\n            }\r\n        }else {\r\n            begin += 2;\r\n        }\r\n\r\n        let end = cokies.indexOf(';' , begin);\r\n\r\n        if(end == -1)\r\n        {\r\n            end = cokies.length;\r\n        }\r\n\r\n        return unescape(cokies.substring(begin + prefix.length , end));\r\n    }\r\n\r\n    AtlasApp.prototype.logView = function (text) {\r\n        //let id = 'atlas-log', element, p;\r\n        //element = document.getElementById('atlas-log');\r\n        //p = document.createElement('p');\r\n        //p.innerText = text;\r\n        console.log(text);\r\n        // element.appendChild(p);\r\n    }\r\n\r\n    AtlasApp.prototype.start                    = _atlas_natives__WEBPACK_IMPORTED_MODULE_0__[\"start\"];\r\n    AtlasApp.prototype.mod                      = {};\r\n    AtlasApp.prototype.mod.for                  = _modules_atlas_mod__WEBPACK_IMPORTED_MODULE_4__[\"lacoFor\"];\r\n    AtlasApp.prototype.mod.form                 = _modules_atlas_mod__WEBPACK_IMPORTED_MODULE_4__[\"form\"];\r\n    AtlasApp.prototype.mod.setForm              = _modules_atlas_mod__WEBPACK_IMPORTED_MODULE_4__[\"setForm\"];\r\n    AtlasApp.prototype.mod.cacheForm            = _modules_atlas_mod__WEBPACK_IMPORTED_MODULE_4__[\"cacheForm\"];\r\n    AtlasApp.prototype.mod.sendJson             = _modules_atlas_mod__WEBPACK_IMPORTED_MODULE_4__[\"sendJson\"];\r\n    AtlasApp.prototype.mod.dataSendJson         = _modules_atlas_mod__WEBPACK_IMPORTED_MODULE_4__[\"dataSendJson\"];\r\n    AtlasApp.prototype.mod.get                  = _modules_atlas_mod__WEBPACK_IMPORTED_MODULE_4__[\"get\"];\r\n\r\n    AtlasApp.prototype.core                     = function() {this.init = {}};\r\n    AtlasApp.prototype.core.vars                = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"vars\"];\r\n    AtlasApp.prototype.core.pagLoad             = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"pagLoad\"];\r\n    AtlasApp.prototype.core.removePagLoad       = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"removePagLoad\"];\r\n    AtlasApp.prototype.core.rout                = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"rout\"];\r\n    AtlasApp.prototype.core.routScript          = {};\r\n    AtlasApp.prototype.core.onloadRoutImportScript = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"onloadRoutImportScript\"];\r\n    AtlasApp.prototype.core.onloadRoutExecultScript = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"onloadRoutExecultScript\"];\r\n    AtlasApp.prototype.core.loadMaster          = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"loadMaster\"];\r\n    AtlasApp.prototype.core.loadRouts           = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"loadRouts\"];\r\n    AtlasApp.prototype.core.setRoutView         = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"setRoutView\"];\r\n    AtlasApp.prototype.core.loadModules         = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"loadModules\"];\r\n    AtlasApp.prototype.core.onloadRout          = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"onloadRout\"];\r\n    AtlasApp.prototype.core.loadLinks           = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"loadLinks\"];\r\n    AtlasApp.prototype.core.loadScripts         = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"loadScripts\"];\r\n    AtlasApp.prototype.core.partialViews        = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"partialViews\"];\r\n    AtlasApp.prototype.core.getPartial          = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"getPartial\"];\r\n    AtlasApp.prototype.core.importModules       = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"importModules\"];\r\n    AtlasApp.prototype.core.component           = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"component\"];\r\n    AtlasApp.prototype.core.addCache            = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"addCache\"];\r\n    AtlasApp.prototype.core.execultCache        = _modules_atlas_core__WEBPACK_IMPORTED_MODULE_2__[\"execultCache\"];\r\n\r\n    AtlasApp.prototype.sys                      = function() {};\r\n    AtlasApp.prototype.sys.cache                = [];\r\n    AtlasApp.prototype.sys.view                 = new Set;\r\n    AtlasApp.prototype.sys.OnGet                = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"OnGet\"] ;\r\n    AtlasApp.prototype.sys.OnPost               = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"OnPost\"];\r\n    AtlasApp.prototype.sys.pagErroCodView       = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"pagErroCodView\"];\r\n    AtlasApp.prototype.sys.apiQuery             = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"apiQuery\"];\r\n    AtlasApp.prototype.sys.queryParametres      = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"queryParametres\"];\r\n    AtlasApp.prototype.sys.queryParametres.text = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"queryParametrestext\"];\r\n    AtlasApp.prototype.sys.queryParametres.prop = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"queryParametresprop\"];\r\n    AtlasApp.prototype.sys.queryParametres.function = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"queryParametresfunction\"];\r\n    AtlasApp.prototype.sys.queryParametres.validarText = _modules_atlas_sys__WEBPACK_IMPORTED_MODULE_3__[\"queryParametresvalidarText\"];\r\n    \r\n    window.AtlasApp = AtlasApp;\r\n    window.AtlasCtor = AtlasCtor;\r\n\r\n})();\n\n//# sourceURL=webpack:///./atlas.web/public/js/atlas-engine/source/atlas.main.js?");

/***/ }),

/***/ "./atlas.web/public/js/atlas-engine/source/atlas.natives.js":
/*!******************************************************************!*\
  !*** ./atlas.web/public/js/atlas-engine/source/atlas.natives.js ***!
  \******************************************************************/
/*! exports provided: start */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"start\", function() { return start; });\n\r\n\r\nlet start = function (e = this) {\r\n    \r\n    let self = e;\r\n\r\n    let init = new Promise((resolve, reject) => {\r\n        console.log('Atlas is start!');\r\n\r\n        resolve(self);\r\n    });\r\n\r\n    self.core.init = init;\r\n\r\n    self.core.init\r\n        .then((self) => {\r\n            return self.core.loadMaster(self);\r\n        })\r\n        .then((self) => {\r\n            return self.core.loadModules(self);\r\n        })\r\n        .then((self) => {\r\n            return self.core.partialViews(self);\r\n        })\r\n        .then((self) => {\r\n            // partialViews retornar um array\r\n            self = self[0];\r\n            return self.core.loadLinks(self);\r\n        })\r\n        .then((self) => {\r\n            return self.core.loadScripts(self);\r\n        })\r\n        .then((self) => {\r\n            return self.core.loadRouts(self)\r\n        })\r\n        .then((self) => {\r\n            return self.core.removePagLoad(self);\r\n        })\r\n        .catch((err) => console.warn(err));\r\n};\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./atlas.web/public/js/atlas-engine/source/atlas.natives.js?");

/***/ }),

/***/ "./atlas.web/public/js/atlas-engine/source/enum/atlas.enum.js":
/*!********************************************************************!*\
  !*** ./atlas.web/public/js/atlas-engine/source/enum/atlas.enum.js ***!
  \********************************************************************/
/*! exports provided: eLogs, eHttoRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eLogs\", function() { return eLogs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eHttoRequest\", function() { return eHttoRequest; });\nlet eLogs = {\r\n    log: 0,\r\n    info: 1,\r\n    warn: 2,\r\n    fatal: 3\r\n};\r\nlet eHttoRequest = {\r\n    get: \"GET\",\r\n    post: \"POST\"\r\n};\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./atlas.web/public/js/atlas-engine/source/enum/atlas.enum.js?");

/***/ }),

/***/ "./atlas.web/public/js/atlas-engine/source/modules/atlas.core.js":
/*!***********************************************************************!*\
  !*** ./atlas.web/public/js/atlas-engine/source/modules/atlas.core.js ***!
  \***********************************************************************/
/*! exports provided: loadModules, setRoutView, loadRouts, rout, onloadRout, loadLinks, loadScripts, partialViews, getPartial, importModules, vars, pagLoad, removePagLoad, loadMaster, component, onloadRoutImportScript, onloadRoutExecultScript, addCache, execultCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadModules\", function() { return loadModules; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setRoutView\", function() { return setRoutView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadRouts\", function() { return loadRouts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rout\", function() { return rout; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onloadRout\", function() { return onloadRout; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadLinks\", function() { return loadLinks; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadScripts\", function() { return loadScripts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"partialViews\", function() { return partialViews; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPartial\", function() { return getPartial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"importModules\", function() { return importModules; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vars\", function() { return vars; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pagLoad\", function() { return pagLoad; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removePagLoad\", function() { return removePagLoad; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadMaster\", function() { return loadMaster; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"component\", function() { return component; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onloadRoutImportScript\", function() { return onloadRoutImportScript; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onloadRoutExecultScript\", function() { return onloadRoutExecultScript; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addCache\", function() { return addCache; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"execultCache\", function() { return execultCache; });\n/* harmony import */ var _enum_atlas_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enum/atlas.enum */ \"./atlas.web/public/js/atlas-engine/source/enum/atlas.enum.js\");\n\r\n/**\r\n * Carregar variaveis de configuracao\r\n * @param {object} ob \r\n * @param {object} self \r\n */\r\nlet vars = function (ob, self) {\r\n\r\n    self.root       = ob.hasOwnProperty('root')     ? ob.root       : window.location.href;\r\n    self.id         = ob.hasOwnProperty('id')       ? ob.id         : '#load-html';\r\n    self.index      = ob.hasOwnProperty('index')    ? ob.index      : 'index';\r\n    self.urlName    = ob.hasOwnProperty('urlName') ? (Array.isArray(ob.urlName) ? ob.urlName : ['index']) : ['index'];\r\n\r\n    self.master     = ob.hasOwnProperty('master')   ? ob.master     : null;\r\n    self.master.url = formatarLink( self , self.master.url);\r\n\r\n    let modulesJson = ob.hasOwnProperty('modulesJson') ? ob.modulesJson : null;\r\n    self.modulesJson= formatarLink( self , modulesJson);\r\n    self.dataModules = new Set();\r\n\r\n    self = formatarRotas(self , ob);\r\n    self = formatarScripts(self , ob)\r\n    self = formatarLinksCss(self , ob);\r\n    self = formatarLinksPartialViews(self , ob);\r\n\r\n    self.logView('atlas config var ok!');\r\n    \r\n    self.cache = ob;\r\n\r\n    return self.core;\r\n};\r\n/**\r\n * formatar links com ./ para raiz root \r\n * @param {object} self \r\n * @param {string} link \r\n */\r\nlet formatarLink = ( self , link ) => {\r\n    if(link.includes('./')){\r\n        return link.replace( './' , self.root);\r\n    }\r\n\r\n    return link;\r\n}\r\n\r\nlet formatarRotas = ( self , ob ) => {\r\n    let rotas;\r\n\r\n    rotas = ob.hasOwnProperty('rout') ? ob.rout : self.log('Rout paramentros invalido', erros.fatal);\r\n\r\n    rotas.map( rota => {\r\n        rota.url = formatarLink( self , rota.url); \r\n    })\r\n\r\n    self.rout = rotas;\r\n    return self;\r\n}\r\n\r\nlet formatarScripts = (self , ob) => {\r\n    let script , resp = [];\r\n    \r\n    script = ob.hasOwnProperty('required') ? (Array.isArray(ob.required.scripts) ? ob.required.scripts : [ob.required.scripts]) : new Array();\r\n    \r\n    script.map(e => {\r\n        resp.push( formatarLink( self , e ) )\r\n    })\r\n\r\n    self.scripts = resp;\r\n    return self;\r\n}\r\n\r\nlet formatarLinksCss = ( self , ob) => {\r\n    let keysLinks , resp = [];\r\n\r\n    keysLinks = self.links = ob.hasOwnProperty('required') ? (Array.isArray(ob.required.links) ? ob.required.links : [ob.required.links]) : [];\r\n    \r\n    keysLinks.map( key => {\r\n        resp.push( formatarLink( self , key) );\r\n    })\r\n\r\n    self.links = resp;\r\n    return self;\r\n}\r\n\r\nlet formatarLinksPartialViews = ( self , ob ) => {\r\n    let views ;\r\n   \r\n    self.partialViews = {};\r\n    self.partialViews.views = [];\r\n    views = [...(ob.hasOwnProperty('required') ? (ob.required.hasOwnProperty('partialViews') ? ob.required.partialViews : []) : [])];\r\n    \r\n    views.map( v => {\r\n        v.view = formatarLink( self , v.view);\r\n    })\r\n\r\n    self.partialViews.objs = views;\r\n    return self;\r\n}\r\n// end format\r\n\r\nlet csspageLoad = \".atlas-load{position:absolute;top:0;margin:0;padding:0;background:#1d81af;height:100vh;width:100%;display:grid;place-content:center;overflow:hidden}.box:after{content:'';width:10px;height:100px;border-top:5px solid transparent;animation:in-out 3s linear infinite;position:absolute}.box:nth-child(1){transform:rotate(0)}.box:nth-child(1):after{border-color:#9fd}.box:nth-child(2){transform:rotate(7.2deg)}.box:nth-child(2):after{border-color:#99ffdf}.box:nth-child(3){transform:rotate(14.4deg)}.box:nth-child(3):after{border-color:#99ffe0}.box:nth-child(4){transform:rotate(21.6deg)}.box:nth-child(4):after{border-color:#99ffe2}.box:nth-child(5){transform:rotate(28.8deg)}.box:nth-child(5):after{border-color:#99ffe4}.box:nth-child(6){transform:rotate(36deg)}.box:nth-child(6):after{border-color:#99ffe6}.box:nth-child(7){transform:rotate(43.2deg)}.box:nth-child(7):after{border-color:#99ffe7}.box:nth-child(8){transform:rotate(50.4deg)}.box:nth-child(8):after{border-color:#99ffe9}.box:nth-child(9){transform:rotate(57.6deg)}.box:nth-child(9):after{border-color:#99ffeb}.box:nth-child(10){transform:rotate(64.8deg)}.box:nth-child(10):after{border-color:#99ffec}.box:nth-child(11){transform:rotate(72deg)}.box:nth-child(11):after{border-color:#9fe}.box:nth-child(12){transform:rotate(79.2deg)}.box:nth-child(12):after{border-color:#99fff0}.box:nth-child(13){transform:rotate(86.4deg)}.box:nth-child(13):after{border-color:#99fff1}.box:nth-child(14){transform:rotate(93.6deg)}.box:nth-child(14):after{border-color:#99fff3}.box:nth-child(15){transform:rotate(100.8deg)}.box:nth-child(15):after{border-color:#99fff5}.box:nth-child(16){transform:rotate(108deg)}.box:nth-child(16):after{border-color:#99fff7}.box:nth-child(17){transform:rotate(115.2deg)}.box:nth-child(17):after{border-color:#99fff8}.box:nth-child(18){transform:rotate(122.4deg)}.box:nth-child(18):after{border-color:#99fffa}.box:nth-child(19){transform:rotate(129.6deg)}.box:nth-child(19):after{border-color:#99fffc}.box:nth-child(20){transform:rotate(136.8deg)}.box:nth-child(20):after{border-color:#99fffd}.box:nth-child(21){transform:rotate(144deg)}.box:nth-child(21):after{border-color:#9ff}.box:nth-child(22){transform:rotate(151.2deg)}.box:nth-child(22):after{border-color:#99fdff}.box:nth-child(23){transform:rotate(158.4deg)}.box:nth-child(23):after{border-color:#99fcff}.box:nth-child(24){transform:rotate(165.6deg)}.box:nth-child(24):after{border-color:#99faff}.box:nth-child(25){transform:rotate(172.8deg)}.box:nth-child(25):after{border-color:#99f8ff}.box:nth-child(26){transform:rotate(180deg)}.box:nth-child(26):after{border-color:#99f7ff}.box:nth-child(27){transform:rotate(187.2deg)}.box:nth-child(27):after{border-color:#99f5ff}.box:nth-child(28){transform:rotate(194.4deg)}.box:nth-child(28):after{border-color:#99f3ff}.box:nth-child(29){transform:rotate(201.6deg)}.box:nth-child(29):after{border-color:#99f1ff}.box:nth-child(30){transform:rotate(208.8deg)}.box:nth-child(30):after{border-color:#99f0ff}.box:nth-child(31){transform:rotate(216deg)}.box:nth-child(31):after{border-color:#9ef}.box:nth-child(32){transform:rotate(223.2deg)}.box:nth-child(32):after{border-color:#99ecff}.box:nth-child(33){transform:rotate(230.4deg)}.box:nth-child(33):after{border-color:#99ebff}.box:nth-child(34){transform:rotate(237.6deg)}.box:nth-child(34):after{border-color:#99e9ff}.box:nth-child(35){transform:rotate(244.8deg)}.box:nth-child(35):after{border-color:#99e7ff}.box:nth-child(36){transform:rotate(252deg)}.box:nth-child(36):after{border-color:#99e6ff}.box:nth-child(37){transform:rotate(259.2deg)}.box:nth-child(37):after{border-color:#99e4ff}.box:nth-child(38){transform:rotate(266.4deg)}.box:nth-child(38):after{border-color:#99e2ff}.box:nth-child(39){transform:rotate(273.6deg)}.box:nth-child(39):after{border-color:#99e0ff}.box:nth-child(40){transform:rotate(280.8deg)}.box:nth-child(40):after{border-color:#99dfff}.box:nth-child(41){transform:rotate(288deg)}.box:nth-child(41):after{border-color:#9df}.box:nth-child(42){transform:rotate(295.2deg)}.box:nth-child(42):after{border-color:#99dbff}.box:nth-child(43){transform:rotate(302.4deg)}.box:nth-child(43):after{border-color:#99daff}.box:nth-child(44){transform:rotate(309.6deg)}.box:nth-child(44):after{border-color:#99d8ff}.box:nth-child(45){transform:rotate(316.8deg)}.box:nth-child(45):after{border-color:#99d6ff}.box:nth-child(46){transform:rotate(324deg)}.box:nth-child(46):after{border-color:#99d5ff}.box:nth-child(47){transform:rotate(331.2deg)}.box:nth-child(47):after{border-color:#99d3ff}.box:nth-child(48){transform:rotate(338.4deg)}.box:nth-child(48):after{border-color:#99d1ff}.box:nth-child(49){transform:rotate(345.6deg)}.box:nth-child(49):after{border-color:#99cfff}.box:nth-child(50){transform:rotate(352.8deg)}.box:nth-child(50):after{border-color:#99ceff}@keyframes in-out{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}\";\r\n/**\r\n * @param {object} self \r\n */\r\nlet pagLoad = function(self) {\r\n    let e = document.getElementsByTagName('body')[0];\r\n    let load = document.createElement('div');\r\n    let head = document.getElementsByTagName('head')[0];\r\n\r\n    let style = document.createElement('style');\r\n    style.setAttribute('id' , 'style-atlas');\r\n    style.innerHTML = csspageLoad;\r\n\r\n    let body = document.createElement('div');\r\n    body.setAttribute('class' , 'main');\r\n\r\n    for(let x = 0 ; x < 50 ; x++){\r\n        let div = document.createElement('div');\r\n        div.setAttribute('class' , 'box');\r\n\r\n        body.appendChild(div);\r\n    }\r\n\r\n    load.setAttribute('id' , 'atlas-load-body');\r\n    load.setAttribute('class' , 'atlas-load');\r\n   \r\n    load.appendChild(body);\r\n    e.appendChild(load);\r\n    head.appendChild(style);\r\n   \r\n    return self;\r\n};\r\n/**\r\n * @param {object} self \r\n */\r\nlet removePagLoad = function (self) {  \r\n    \r\n    setTimeout( function() {\r\n        let body = document.getElementById('atlas-load-body');\r\n        let style = document.getElementById('style-atlas');\r\n\r\n        body.innerHTML = null;    \r\n        style.innerHTML = null;\r\n    \r\n    } , 3000 );\r\n    return self;\r\n}\r\n/**\r\n * Carregar rotas\r\n * @param {object} self \r\n */\r\nlet loadRouts = async function (self) {\r\n    let rout = self.rout;\r\n    let length = self.rout.length;\r\n    let i = 0;\r\n\r\n    rout.map(item => {\r\n        self.sys.OnGet( item.url )\r\n            .then((data) => {\r\n\r\n                let value = data[0];\r\n                let route = verificarHtmlScript( item , value );\r\n                self.sys.view.add(route);\r\n\r\n                i++;\r\n                if (i == length) return true;\r\n\r\n                return false;\r\n            })\r\n            .then((data) => {\r\n                self.logView('Atlas - route init');\r\n                let index = null;\r\n\r\n                if (data) {\r\n                    index = self.core.rout(self.index);\r\n                    self.core.setRoutView(index);\r\n\r\n                    return data;\r\n                }\r\n            })\r\n            .catch((data) => console.warn(data));\r\n    });\r\n    return self;\r\n}\r\n/**\r\n * Verificar se existe algum script no html\r\n * caso ache algum script, remove ele do html(formartarHtmlScript) e passa para o objeto Route\r\n * @param {object(route)} route \r\n * @param {string} data html da view\r\n */\r\nlet verificarHtmlScript = function (route , data ) {\r\n\r\n    route.script = [];\r\n    route.data = data;\r\n    route.scriptIsSet = false;\r\n\r\n    while(data.includes('<script>')){\r\n        let ob = formartarHtmlScript(data);\r\n//// ? verificar \r\n        data = ob.data;\r\n        route.script.push(ob.script);\r\n    }\r\n\r\n    return route;\r\n};\r\n\r\n/**\r\n * Remover o script do html\r\n * @param {string} data html da view\r\n * @returns { object } data : html formatado sem script, script : texto script \r\n */\r\nlet formartarHtmlScript = function(data){\r\n    const sc = '<script>';\r\n    const scf = '</script>';\r\n\r\n    let begin = data.indexOf(sc) + sc.length;\r\n    let end = data.indexOf(scf , begin);\r\n\r\n    let script = data.substring(begin , end);\r\n    let dataNew = data.substring(0 , begin - sc.length) + data.substring(end + scf.length , data.length);  \r\n    \r\n    return { data : dataNew , script : script };\r\n}\r\n\r\n\r\n/**\r\n * Recuperar Rout\r\n * @param {string} path da url da rora\r\n */\r\nlet rout = function (path) {\r\n    let self = globalThis.AtlasApp;\r\n    let response = null;\r\n\r\n    for (let r of self.sys.view) {\r\n        if (r.path == path) {\r\n            response = r;\r\n        }\r\n    }\r\n    \r\n    return response == null ? {\r\n        title: 'notFound' , \r\n        data : '<h1>Página não encontrada</h1>' ,\r\n        path : '/index' ,\r\n        name : 'nout Found'\r\n    } : response;\r\n}\r\n\r\n/**\r\n * Gerar rout na tela\r\n * @param {objec} rout\r\n */\r\nlet setRoutView = function (rout, callBack = null) {\r\n\r\n    let self = globalThis.AtlasApp;\r\n    let element = document.getElementById(self.id);\r\n    let title = document.getElementsByTagName('title')[0];\r\n    let urlParamtres = window.location.search;\r\n\r\n    if (typeof rout != 'object')\r\n        rout = self.core.rout(rout);\r\n\r\n    if (typeof callBack == 'object' || callBack == null)\r\n        callBack = self.core.onloadRout;\r\n\r\n    if (rout.title != null)\r\n        title.innerHTML = rout.title;\r\n\r\n    element.innerHTML = rout.data;\r\n\r\n    window.history.pushState(\"object or string\", rout.title, `${rout.path}${urlParamtres}`);\r\n\r\n    setScript(rout);\r\n\r\n    self.logView(`rota '${rout.name}' carregada com sucesso.`);\r\n    \r\n    \r\n    try {\r\n        if (typeof callBack == 'function')\r\n            callBack();\r\n\r\n    } catch (e) { console.warn(e) }\r\n\r\n    self.path = rout.path;\r\n    self.core.onloadRoutExecultScript(self);\r\n    //self.core.execultCache(self);\r\n}\r\n/**\r\n * gerar script do objeto route no body caso ele não exista\r\n * @param {object} route \r\n */\r\nlet setScript = function (route) {\r\n    let e = document.getElementById(`script-route-${route.name}`);\r\n\r\n    if( e == null && route.script.length > 0 ){\r\n        let script = document.createElement('script');\r\n        let b = document.getElementsByTagName('body')[0];\r\n\r\n        script.type = 'text/javascript';\r\n        script.setAttribute('id' , `script-route-${route.name}`);\r\n\r\n        let textScript ;\r\n\r\n        route.script.map( e => { textScript += e });\r\n\r\n        script.innerHTML = textScript\r\n\r\n        b.appendChild(script);\r\n    }\r\n}\r\n/**\r\n * callbak : execulta quando a rout e carregada\r\n */\r\nlet onloadRout = async function () {\r\n\r\n    let init = new Promise((resolve, reject) => {\r\n        \r\n        let self = globalThis.AtlasApp;\r\n        let r = true;\r\n\r\n        while(r){\r\n            try{\r\n                r = self.sys.apiQuery()\r\n            }catch(e){\r\n                console.warn(e);\r\n                r = false;\r\n            }\r\n        };\r\n\r\n        resolve(self);\r\n    })\r\n\r\n    setTimeout(() => {\r\n        let self = globalThis.AtlasApp;\r\n        self.sys.apiQuery();\r\n\r\n    }, 1000);\r\n\r\n    return await Promise.all([init]);\r\n}\r\n\r\n/**\r\n * Execultar funcao pre definida ao carregar a route\r\n * @param {string} name \r\n * @param {function} func \r\n */\r\n\r\nlet onloadRoutImportScript = function( name , func){\r\n    let self = globalThis.AtlasApp;\r\n\r\n    self.core.routScript[name] = func;\r\n\r\n    self.core.onloadRoutExecultScript(self);\r\n\r\n    return self;\r\n}\r\n// execultar funcao acima\r\nlet onloadRoutExecultScript = function( self ){\r\n    let name = self.path; \r\n    let fn = self.core.routScript[name];\r\n\r\n    if(typeof fn == 'function')\r\n        fn();\r\n\r\n    return self;\r\n}\r\n/**\r\n * Carregar modulos \r\n * @param {object} self \r\n */\r\nlet loadModules = async function (self) {\r\n    if (self.modulesJson == null) return self.core;\r\n\r\n    let url = self.modulesJson;\r\n    let modules = fetch(url);\r\n\r\n    self.logView('atlas load modules init.');\r\n\r\n    await modules\r\n        .then((data) => data.json())\r\n        .then((data) => {\r\n\r\n            let urlBase = data.urlPathModule;\r\n            let modules = data.modules;\r\n\r\n            let body = document.getElementsByTagName('body')[0];\r\n\r\n            modules.map(mod => {\r\n\r\n                let script = document.createElement('script');\r\n                script.src = `${urlBase}${mod.path}`;\r\n\r\n                self.logView(`atlas load modules '${mod.Name}' ok `);\r\n\r\n                body.appendChild(script);\r\n            });\r\n            return self;\r\n        })\r\n        .catch((err) => console.warn(err));\r\n\r\n    return self;\r\n}\r\n\r\n/**\r\n * Carregar links css|less\r\n * @param {object} self \r\n */\r\nlet loadLinks = function (self) {\r\n\r\n    let head = document.getElementsByTagName('head')[0];\r\n\r\n    self.links.map(link => {\r\n\r\n        let linkcChild = document.createElement('link');\r\n\r\n        if (link.includes('.less')) {\r\n            linkcChild.rel = 'stylesheet/less';\r\n        }\r\n        else if (link.includes('.css')) {\r\n            linkcChild.rel = 'stylesheet';\r\n        }\r\n        else {\r\n            self.log(`${link} aparentemente não é um link/arquivo css`, erros.warn)\r\n        }\r\n        linkcChild.type = 'text/css';\r\n        linkcChild.href = `${link}`;\r\n\r\n        head.appendChild(linkcChild);\r\n\r\n        let name = link.split('/');\r\n        name = name[name.length - 1];\r\n\r\n        self.logView(`atlas load link css '${name}' ok.`);\r\n    })\r\n\r\n    return self;\r\n};\r\n/**\r\n * Carregar scripts\r\n * @param {object} self \r\n */\r\nlet loadScripts = function (self) {\r\n\r\n    let body = document.getElementsByTagName('body')[0];\r\n\r\n    self.scripts.map(script => {\r\n        let scriptChid = document.createElement('script');\r\n        scriptChid.src = `${script}`;\r\n\r\n        body.appendChild(scriptChid);\r\n\r\n\r\n        let name = script.split('/');\r\n        name = name[name.length - 1];\r\n\r\n        self.logView(`atlas load script '${name}' ok.`);\r\n    });\r\n\r\n    return self;\r\n}\r\n\r\n/**\r\n * Importar modulos para app\r\n * @param {string} name nome do mudulo\r\n * @param {function} newModule funcao do modulo\r\n */\r\nlet importModules = function (name, newModule, callBack = '') {\r\n    let self = globalThis.AtlasApp;\r\n\r\n    self.mod[name] = newModule;\r\n\r\n    if (typeof callBack == 'function') {\r\n        callBack();\r\n    }\r\n}\r\n/**\r\n * Carregar partial views\r\n * @param {object} self \r\n */\r\nlet partialViews = async function (self) {\r\n    //let self = globalThis.AtlasApp;\r\n    let objs = self.partialViews.objs;\r\n    let e = document.getElementById(self.id);\r\n\r\n    let promise = new Promise((resolve, reject) => {\r\n        try {\r\n            objs.map(obj => {\r\n\r\n                self.sys.OnGet(obj.view)\r\n                    .then((data) => {\r\n\r\n                        let ids = obj.ids;\r\n                        e.innerHTML = data;\r\n\r\n                        ids.map(id => {\r\n                            obj.data = document.getElementById(id);\r\n\r\n                            self.partialViews.views[`${obj.name}.${id}`] = obj.data;\r\n                        })\r\n\r\n\r\n                    });\r\n            });\r\n            resolve(self);\r\n            e.innerHTML = null;\r\n        }\r\n        catch (e) { reject(e) }\r\n    });\r\n\r\n    promise\r\n        .then((data) => data)\r\n        .catch((data) => {\r\n            console.log(data);\r\n            return globalThis.AtlasApp;\r\n        })\r\n\r\n    return await Promise.all([promise]);\r\n}\r\n/**\r\n * Carregar componentes - aux para partialViews\r\n * @param {object} self \r\n * @param {string} data : html da partialView \r\n * @param {string} component : html do component a ser substituido \r\n */\r\nlet component = function (self , data , component ) {  \r\n    if(component.length > 0)\r\n    {\r\n        component.map(e => {\r\n            let p = e.split('=')[0];\r\n            let value = e.split('=')[1];\r\n            let prefix = `{{${p}}}`;\r\n\r\n            data = data.replace(prefix , value);\r\n        })\r\n    }\r\n\r\n    return data;\r\n}\r\n/**\r\n * Carregar partialView no html\r\n * @param {string} value : nome da partial view \r\n * @param {object} element : objeto a onde sera inserido a partialView\r\n */\r\nlet getPartial = function (value, element) {\r\n    let self = globalThis.AtlasApp;\r\n    let name = value;\r\n    let component = element.dataset.component;\r\n    let insertChild = element.dataset.insertchild;\r\n    let data = self.partialViews.views[name];\r\n\r\n    if (data == null) {\r\n        return console.warn(`partial view : ${name} não encontrada.`);\r\n    }\r\n\r\n    if(component != null)\r\n    {\r\n        component = component.split(';');\r\n\r\n        data.innerHTML = self.core.component(self , data.innerHTML , component);\r\n    }\r\n\r\n    if(insertChild == null || insertChild == 'bottom')\r\n    {\r\n        element.appendChild(data);\r\n    }\r\n    else if(insertChild == 'top'){\r\n        element.insertBefore( data , element.firstChild );\r\n    }\r\n    else{\r\n        console.warn(`insertChild: ${insertChild}, não reconhecido`);\r\n        element.appendChild(data);\r\n    }\r\n}\r\n/**\r\n * Carregar master page\r\n * @param {objec} self \r\n */\r\nlet loadMaster = async function(self) {\r\n    \r\n    if(self.master == null)\r\n        return self;\r\n    \r\n    let id = self.master.idInsert;\r\n    let e = document.getElementById(id);\r\n\r\n    if(e == null){\r\n        self.log(_enum_atlas_enum__WEBPACK_IMPORTED_MODULE_0__[\"eLogs\"].fatal , `Não foi possivel pegar o ID : ${id}`);\r\n        return self;\r\n    }\r\n\r\n    let data = await self.sys.OnGet(self.master.url);\r\n\r\n    e.innerHTML = data;\r\n\r\n    return self;\r\n}\r\n/**\r\n * addicionar funcao ao chache\r\n * @param {function} func \r\n */\r\nlet addCache = function( func ) {\r\n    let self = globalThis.AtlasApp;\r\n\r\n    if(typeof func != 'function') return console.warn('func não e uma função!');\r\n\r\n    self.sys.cache.push( func );\r\n\r\n    return self;\r\n}\r\n/**\r\n * Execultar funcoes que estao no cache\r\n * @param {object} self \r\n */\r\nlet execultCache = function( self ) {\r\n    let cahce = self.sys.cache;\r\n\r\n    cahce.forEach( fn => {\r\n        \r\n        fn();\r\n    });\r\n\r\n    return self;\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./atlas.web/public/js/atlas-engine/source/modules/atlas.core.js?");

/***/ }),

/***/ "./atlas.web/public/js/atlas-engine/source/modules/atlas.mod.js":
/*!**********************************************************************!*\
  !*** ./atlas.web/public/js/atlas-engine/source/modules/atlas.mod.js ***!
  \**********************************************************************/
/*! exports provided: lacoFor, lacoForOf, sendJson, dataSendJson, form, cacheForm, setForm, get */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lacoFor\", function() { return lacoFor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lacoForOf\", function() { return lacoForOf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sendJson\", function() { return sendJson; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dataSendJson\", function() { return dataSendJson; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"form\", function() { return form; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cacheForm\", function() { return cacheForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setForm\", function() { return setForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n\r\n\r\nlet setForm = function (value, element) {\r\n    let self = globalThis.AtlasApp;\r\n    let obj = self.mod.cacheForm.data[value];\r\n\r\n    if (obj != null) {\r\n        let key = Object.keys(obj);\r\n        key = key.filter(e => { if (!e.includes('__')) return e; });\r\n\r\n        key.map(e => {\r\n\r\n            let campo = document.getElementsByName(e);\r\n            if (campo != null && campo.length > 0)\r\n                campo[0].value = obj[e];\r\n\r\n        });\r\n    }\r\n}\r\n\r\nlet form = function (value, element) {\r\n    let self, fm, r, isCache, action , callback;\r\n    let resposta ;\r\n    self = globalThis.AtlasApp;\r\n    fm = document.getElementById(value);\r\n    name = fm.dataset.name;\r\n    callback = fm.dataset.callback;\r\n    isCache = fm.dataset.cache == 'false' ? false : true;\r\n\r\n    action = fm.attributes.action;\r\n\r\n    r = getChildValuesForm(fm, {});\r\n\r\n    if (isCache)\r\n        self.mod.cacheForm.data[name] = r;\r\n\r\n    if (action != null) {\r\n        resposta = sendForm(action.value, r);\r\n        self.mod.cacheForm.data[name].__RESPONSE__ = resposta;\r\n    }\r\n\r\n    if(callback != null && typeof globalThis[callback] == 'function')\r\n    {\r\n        let func = globalThis[callback];\r\n\r\n        func(resposta);\r\n    }\r\n}\r\n\r\nlet sendForm = async function (url, data, method = 'post') {\r\n    let self = globalThis.AtlasApp;\r\n    let response;\r\n\r\n    response = await self.sys.OnPost(url, data)\r\n        .then((data) => {\r\n            return data;\r\n        })\r\n        .then((data) => {\r\n            return JSON.parse(data);\r\n        }).catch((err) => {\r\n            console.warn(err);\r\n            return err;\r\n        });\r\n\r\n    return Promise.resolve(response);\r\n}\r\n\r\nlet cacheForm = {\r\n    data: {}\r\n}\r\n\r\nlet getChildValuesForm = function (element, data) {\r\n    let x = 0, e, length = 0;\r\n\r\n    if (typeof element !== \"object\")\r\n        return data;\r\n\r\n    length = element.length;\r\n    if (length > 0) {\r\n        for (; x < length; x++)\r\n            data = getChildValuesForm(element[x], data);\r\n    }\r\n\r\n    if (element.childNodes != null && element.childNodes.length > 0) {\r\n        for (e of element.childNodes)\r\n            data = getChildValuesForm(e, data);\r\n    }\r\n    if (element.nodeName == \"INPUT\" || element.nodeName == \"SELECT\" || element.nodeName == \"TEXTEAREA\") {\r\n\r\n        //this.validInputs(element);\r\n\r\n        data[element.name] = element.value;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nlet lacoForOf = function (value, element) {\r\n    let self = globalThis.AtlasApp;\r\n\r\n    if (value.trim().includes('var') || value.trim().includes('let')) {\r\n        let arg = value.split(' ')\r\n            .filter(e => {\r\n                if (e != 'var' && e != 'let' && e != 'of') return e\r\n            }\r\n            );\r\n\r\n        let item = arg[0];\r\n        let ob = globalThis[arg[1]];\r\n        let html = element.innerHTML;\r\n        let newHtml = '';\r\n\r\n        if (ob != null) {\r\n            for (let y of ob) {\r\n                globalThis[item] = y;\r\n\r\n                newHtml += self.sys.queryParametres(html.trim());\r\n            }\r\n\r\n            element.innerHTML = newHtml;\r\n        }\r\n        else {\r\n            console.warn(`object ${arg[1]} não definido!`);\r\n        }\r\n\r\n        return;\r\n    }\r\n};\r\n\r\n\r\nlet lacoFor = function( value , element) {\r\n\r\n    let isOf = value.toLowerCase().includes(' of ');\r\n\r\n    element.hidden = true;\r\n\r\n    if(isOf){\r\n        lacoForOf(value, element);\r\n    }\r\n    else {\r\n        lacoForIncremental(value , element);\r\n    }\r\n\r\n    element.hidden = false;\r\n};\r\n\r\nlet lacoForIncremental = function (value, element) {\r\n\r\n    let self = globalThis.AtlasApp;\r\n\r\n    if (value.includes(';')) {\r\n        let par = value.split(';');\r\n\r\n        let arg1 = par[0];\r\n\r\n        if (arg1.trim().includes('var') || arg1.trim().includes('let')) {\r\n            arg1 = arg1.replace('var', '').trim();\r\n\r\n            let variavel = arg1.includes('=') ? arg1.split('=')[0] : arg1;\r\n            let val = arg1.includes('=') ? arg1.split('=')[1] : null;\r\n\r\n            try {\r\n                val = parseInt(val);\r\n                if (val == NaN) throw 'invalide';\r\n\r\n            } catch (e) {\r\n                val = eval(val);\r\n            }\r\n\r\n            if (val != null) {\r\n                globalThis[variavel.trim()] = val;\r\n            }\r\n            else {\r\n                globalThis[variavel.trim()] = variavel;\r\n            }\r\n        }\r\n\r\n        let arg2 = par[1];\r\n        let arg3 = par[2];\r\n\r\n        let html = element.innerHTML;\r\n        let newHtml = '';\r\n\r\n        while (eval(arg2)) {\r\n            newHtml += self.sys.queryParametres(html.trim())\r\n            eval(arg3);\r\n        }\r\n\r\n        element.innerHTML = newHtml;\r\n    };\r\n}\r\n\r\n\r\nlet dataSendJson = function (value, element) {\r\n\r\n    let self = globalThis.AtlasApp;\r\n    let callback = element.data.callback;\r\n    let url = element.data.url;\r\n\r\n    return self.mod.sendJson(value, url, callback);\r\n}\r\n\r\nlet get = function (value, element) {\r\n    let self = globalThis.AtlasApp;\r\n    let ob = JSON.parse(value);\r\n    let resp = '';\r\n    let callback = globalThis[ob.callback];\r\n    let varResponse = ob.var == null ? '$getResponse' : ob.var;\r\n\r\n    self.sys.OnGet(ob.url)\r\n        .then((data) => {\r\n\r\n            globalThis[varResponse] = JSON.parse( data );\r\n\r\n            if (typeof callback != 'function') return console.warn('callback erro! :: get');\r\n\r\n            callback(data[0]);\r\n\r\n\r\n        })\r\n        .catch((err) => console.warn(err));\r\n}\r\n\r\n\r\nlet sendJson = async function (object, url, callbackName = null) {\r\n    let self = globalThis.AtlasApp;\r\n    let val = typeof object == 'object' ? object : globalThis[object];\r\n    let resp;\r\n\r\n    resp = await self.sys.OnPost(url, val)\r\n        .then((data) => {\r\n            return data\r\n        })\r\n        .then((data) => {\r\n            return JSON.parse(data);\r\n        }).catch((data) => {\r\n            console.warn(data);\r\n        });\r\n    if (callbackName != null && typeof callbackName == 'string' && typeof globalThis[callbackName] == 'function') {\r\n        let fn = globalThis[callbackName];\r\n\r\n        fn(resp);\r\n    }\r\n\r\n    return resp;\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./atlas.web/public/js/atlas-engine/source/modules/atlas.mod.js?");

/***/ }),

/***/ "./atlas.web/public/js/atlas-engine/source/modules/atlas.sys.js":
/*!**********************************************************************!*\
  !*** ./atlas.web/public/js/atlas-engine/source/modules/atlas.sys.js ***!
  \**********************************************************************/
/*! exports provided: OnGet, OnPost, pagErroCodView, apiQuery, queryParametres, queryParametrestext, queryParametresvalidarText, queryParametresfunction, queryParametresprop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OnGet\", function() { return OnGet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OnPost\", function() { return OnPost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pagErroCodView\", function() { return pagErroCodView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"apiQuery\", function() { return apiQuery; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"queryParametres\", function() { return queryParametres; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"queryParametrestext\", function() { return queryParametrestext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"queryParametresvalidarText\", function() { return queryParametresvalidarText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"queryParametresfunction\", function() { return queryParametresfunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"queryParametresprop\", function() { return queryParametresprop; });\n/* harmony import */ var _enum_atlas_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../enum/atlas.enum */ \"./atlas.web/public/js/atlas-engine/source/enum/atlas.enum.js\");\n\r\n\r\nlet apiQuery = function () {\r\n\r\n    let isExcult = false;\r\n    let self = globalThis.AtlasApp;\r\n    let modules = self.dataModules;\r\n\r\n    let natives = [\r\n        { name: '[data-route]',   dataset: 'route',     method: 'core.setRoutView.{data}',    type: 'onclick' },\r\n        { name: '[data-for]',     dataset: 'for',       method: 'mod.for.{data}',             type: 'onload' , runat : 'ignore' },\r\n        { name: '[data-setForm]', dataset: 'setform',   method: 'mod.setForm.{data}',         type: 'onload' , runat : 'ignore' },\r\n        { name: '[data-form]',    dataset: 'form',      method: 'mod.form.{data}' ,           type: 'onclick' },\r\n        { name: '[data-view]',    dataset: 'view',      method: 'core.getPartial.{data}',     type: 'onload' },\r\n        { name: '[data-get]',     dataset: 'get',       method: 'mod.get.{data}',             type: 'onload' },\r\n    ];\r\n\r\n    let args = [...natives, ...modules]\r\n\r\n    args.forEach(arg => {\r\n\r\n        let elementes = document.querySelectorAll(arg.name);\r\n        let param = arg.method.split('.');\r\n        let fn = self;\r\n\r\n        param.map(e => {\r\n            if (!e.includes('{'))\r\n                fn = fn[e]\r\n        })\r\n\r\n        elementes.forEach(element => {\r\n            let value = element.dataset[arg.dataset];\r\n            let runat = element.dataset['runat'];\r\n            let isIgnore = arg.ignore == 'ignore';\r\n\r\n            if (runat != 'ok' || isIgnore ) {\r\n\r\n                isExcult = true;\r\n\r\n                if (arg.type == 'onload') {\r\n\r\n                    fn(value, element);\r\n                }\r\n                else {\r\n                    element[arg.type] = function () {\r\n                        fn(value, element);\r\n                    }\r\n                }\r\n\r\n                element.dataset['runat'] = 'ok';\r\n            }\r\n        });\r\n    });\r\n\r\n    return isExcult;\r\n}\r\n\r\n/**\r\n * Requisicao ajax GET\r\n * @param {string} url da requisicao\r\n */\r\nlet OnGet = async function (url) {\r\n\r\n    var get = new Promise((resolve, reject) => {\r\n\r\n        var ajax = new XMLHttpRequest();\r\n\r\n        ajax.open(_enum_atlas_enum__WEBPACK_IMPORTED_MODULE_0__[\"eHttoRequest\"].get, url, true);\r\n\r\n        ajax.send()\r\n\r\n        ajax.onreadystatechange = function () {\r\n            if (ajax.readyState == 4 && ajax.status == 200) {\r\n                var data = ajax.responseText;\r\n                resolve(data);\r\n            }\r\n            else if (ajax.readyState == 4) {\r\n                reject(ajax.status);\r\n            }\r\n        }\r\n    });\r\n\r\n    return await Promise.all([get]);\r\n}\r\n/**\r\n * Requisicao ajax POST\r\n * @param {string} url\r\n * @param {objec} objec\r\n */\r\nlet OnPost = function (url, objec) {\r\n\r\n    var post = new Promise((resolve, reject) => {\r\n\r\n        var ajax = new XMLHttpRequest();\r\n\r\n        ajax.open(_enum_atlas_enum__WEBPACK_IMPORTED_MODULE_0__[\"eHttoRequest\"].post, url, true);\r\n        ajax.setRequestHeader('Content-type', 'application/json'); //x-www-form-urlencoded\r\n\r\n        ajax.send(JSON.stringify({ data : objec }));\r\n\r\n        ajax.onreadystatechange = function () {\r\n\r\n            if (ajax.readyState == 4 && ajax.status == 200) {\r\n                var data = ajax.responseText;\r\n\r\n                resolve(data);\r\n            }\r\n            else if (ajax.readyState == 4) {\r\n                reject(ajax.status);\r\n            }\r\n        }\r\n    });\r\n    return post;\r\n}\r\n\r\nlet queryParametres = function (text) {\r\n    let self = globalThis.AtlasApp;\r\n    let right, left, p1, p2, arg, response;\r\n\r\n    if (text.includes('{{') && text.includes('}}')) {\r\n        p1 = text.indexOf('{{');\r\n        p2 = text.indexOf('}}') + 2;\r\n\r\n        left = text.substring(0, p1);\r\n        right = text.substring(p2, text.length);\r\n        arg = text.substring(p1, p2);\r\n\r\n        response = self.sys.queryParametres.text(arg);\r\n\r\n        text = left + response + right;\r\n    }\r\n\r\n    if (text.includes('{{') && text.includes('}}')) {\r\n        text = self.sys.queryParametres(text);\r\n    }\r\n\r\n    return text;\r\n}\r\n\r\nlet queryParametrestext = function (text) {\r\n    let self, prop, x, y, f, func, response;\r\n    self = globalThis.AtlasApp;\r\n\r\n\r\n    if (text.includes('{{') && text.includes('}}')) {\r\n        x = text.indexOf('{{');\r\n        y = text.indexOf('}}');\r\n        f = text.substring(x + 2, y);\r\n\r\n        f = self.sys.queryParametres.validarText(f);\r\n\r\n        if (typeof f == 'object') {\r\n            return f.response;\r\n        }\r\n\r\n        if(f.includes('-') || f.includes('+') || f.includes('*') || f.includes('/') ){\r\n            return queryParametresOperacoes(f);\r\n        }\r\n\r\n        if(f.includes('==') || f.includes('!=') || f.includes('>') || f.includes('<') || f.includes('<=') || f.includes('>=') )\r\n        {\r\n           return queryParametrescondicoesMult(f) \r\n        }\r\n\r\n        if(f.includes('[') && f.includes(']')){\r\n            return queryParametresarray(f);\r\n        }\r\n\r\n        if (f.includes('.')) {\r\n            return self.sys.queryParametres.prop(f);\r\n        }\r\n        else if (typeof f == 'function' || f.includes('(') || f.includes(')')) {\r\n            return self.sys.queryParametres.function(f);\r\n        }\r\n        else {\r\n            prop = f;\r\n        }\r\n    }\r\n    else {\r\n        prop = text;\r\n    }\r\n\r\n    response = globalThis[prop];\r\n\r\n    if (response == null) {\r\n        return self.log( _enum_atlas_enum__WEBPACK_IMPORTED_MODULE_0__[\"eHttoRequest\"].warn , `QueryParametres :: propriedad '${prop}' undefined.`);\r\n    }\r\n    else if (typeof response == 'function') {\r\n        return self.sys.queryParametres.function(response);\r\n    }\r\n    return response;\r\n}\r\n\r\nlet queryParametresvalidarText = function (data) {\r\n   let  text = data.toLowerCase();\r\n    if (text == 'false')\r\n        return { response: false };\r\n\r\n    else if (text == 'true')\r\n        return { response: true };\r\n\r\n    try {\r\n        // let value = parseInt(text);\r\n        // \r\n        //  if(value == NaN) \r\n        throw 'invalide';\r\n        //\r\n        // return {response: value};\r\n    }\r\n    catch (e) {\r\n        return data;\r\n    }\r\n}\r\n\r\nlet queryParametresarray = function(text)\r\n{\r\n    let variavel = text.split('[')[0];\r\n    let begin = text.indexOf('[') + 1;\r\n    let end = text.indexOf(']' , begin - 1);\r\n    let arg = text.substring(begin , end);\r\n    let isNumeric;\r\n\r\n    let arr = globalThis[variavel];\r\n\r\n    try{\r\n        isNumeric = parseInt(arg);\r\n    }catch(e){}\r\n\r\n    if(typeof isNumeric == 'number' && !isNaN(isNumeric))\r\n    {\r\n        return arr[isNumeric];\r\n    }\r\n    else{\r\n        let r = eval(arg);\r\n\r\n        return arr[r];\r\n    }\r\n}\r\n\r\nlet queryParametresOperacoes = function(text) {\r\n    \r\n    let sinal ;\r\n\r\n    if(text.includes('+'))\r\n        sinal = '+';\r\n    else if(text.includes('-'))\r\n        sinal = '-';\r\n    else if(text.includes('/'))\r\n        sinal = '/';\r\n    else if(text.includes('*'))\r\n        sinal = '*';\r\n\r\n    let arg1 = text.split(sinal)[0].trim();\r\n    let arg2 = text.split(sinal)[1].trim();\r\n\r\n    return eval(`${arg1} ${sinal} ${arg2}`);\r\n}\r\n\r\nlet queryParametrescondicoesMult = function(text) {\r\n    if(text.includes('&&'))\r\n    {\r\n        let args = text.split('&&');\r\n        let cond = [];\r\n        args.map(e => {\r\n           cond.push( queryParametrescondicoes(e) );        \r\n        })\r\n\r\n        let r = cond.filter(e => e == false);\r\n        return r.length > 0 ? false : true;\r\n    }\r\n    else {\r\n        return queryParametrescondicoes(text);    \r\n    }\r\n}\r\n\r\nlet queryParametrescondicoes = function(text) {\r\n    let sinal;\r\n\r\n    if(text.includes('=='))\r\n        sinal = '==';\r\n    else if(text.includes('!='))\r\n        sinal = '!=';\r\n    else if(text.includes('<'))\r\n        sinal = '<';\r\n    else if(text.includes('>'))\r\n        sinal = '>';\r\n    else if(text.includes('<='))\r\n        sinal = '<=';\r\n    else if(text.includes('>='))\r\n        sinal = '>=';\r\n\r\n    let arg1 = text.split(sinal)[0].trim();\r\n    let arg2 = text.split(sinal)[1].trim();\r\n    \r\n    return eval(`${arg1} ${sinal} ${arg2}`);\r\n}\r\n\r\nlet queryParametresprop = function (params) {\r\n    let args, self, e, l, i, r;\r\n\r\n    self = globalThis.AtlasApp;\r\n\r\n    args = params.split('.');\r\n    e = globalThis[args[0]];\r\n\r\n    args[0] = null;\r\n\r\n    l = args.length - 1;\r\n    i = 0;\r\n    r = null;\r\n\r\n    args.map(arg => {\r\n        if (arg != null) {\r\n            i++\r\n\r\n            if (i == l) {\r\n                if (typeof e[arg] == 'function' || arg.includes('(') || arg.includes(')')) {\r\n                    r = self.sys.queryParametres.function(e[arg])\r\n                }\r\n                else \r\n                {\r\n                    e = e[arg];    \r\n                }\r\n            }\r\n            else {\r\n                e = e[arg];\r\n            }\r\n        }\r\n    })\r\n\r\n    return r != null ? r : e;\r\n}\r\n\r\nlet queryParametresfunction = function (params) {\r\n    let self, prop, fun, response;\r\n    self = globalThis.AtlasApp;\r\n\r\n    if (typeof params != 'function' && params.includes('(') && params.includes(')')) {\r\n        prop = params.split('(')[0];\r\n        fun = params.split('(')[1];\r\n        fun = fun.split(')')[0];\r\n\r\n        response = eval(('prop(' + fun + ')'));\r\n\r\n    }\r\n    else {\r\n        response = params();\r\n    }\r\n\r\n    if (response == null) {\r\n        self.log(_enum_atlas_enum__WEBPACK_IMPORTED_MODULE_0__[\"eHttoRequest\"].warn ,`sys.queryParametres.function :: função sem retorno`);\r\n        return '';\r\n    }\r\n\r\n    return response;\r\n}\r\n\r\nlet pagErroCodView = function (cod, text) {\r\n    let self = globalThis.AtlasApp;\r\n    let e = document.getElementsByTagName('body')[0];\r\n\r\n    let data = document.createElement('div');\r\n    let tipo = document.createElement('h1');\r\n    let descricao = document.createElement('h5');\r\n    let section = document.createElement('section');\r\n\r\n    tipo.innerText = cod;\r\n    descricao.innerText = text;\r\n    // section.innerHTML = `<button data-rout=\\'${self.index}\\'>home</button>`\r\n    data.appendChild(tipo)\r\n    data.appendChild(descricao);\r\n    data.appendChild(section);\r\n\r\n    e.innerHTML = null;\r\n    e.appendChild(data);\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./atlas.web/public/js/atlas-engine/source/modules/atlas.sys.js?");

/***/ })

/******/ });